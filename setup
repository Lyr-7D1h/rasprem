#!/usr/bin/env bash
# Setup Access Point
# Mimic samsung phone (mac and hostname)
# Creates 'monitor' user with AP_PASS
# Removes default pi
# https://github.com/lukicdarkoo/rpi-wifi/blob/master/configure
# https://raspberrypi-guide.github.io/networking/create-wireless-access-point

set -eu

# Input validation
if [ $# != 2 ]; then
  echo "./setup {AP_SSID} {AP_PASS}"
  exit 1
fi
if [ ${#1} -lt 5 ]; then
  echo "AP_SSID needs to be larger than 5"
  exit 1
fi
if [ ${#2} -lt 8 ]; then
  echo "AP_PASS needs to be larger than 8"
  exit 1
fi


AP_SSID=$1
AP_PASS=$2
USER="monitor"

AP_IP='192.168.10.1'
AP_IP_BEGIN=`echo "${AP_IP}" | sed -e 's/\.[0-9]\{1,3\}$//g'`

export DEBIAN_FRONTEND=noninteractive 
# Get right binaries
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/game"

# Update machine
apt-get update && apt-get upgrade -y

# Install needed packages
apt-get install -y macchanger dnsmasq hostapd dhcpcd nodejs vim

# Not sure if needed
apt-get install -y netfilter-persistent iptables-persistent

echo Changing hostname to "Galaxy S10+"
echo "Galaxy S10+" > /etc/hostname
sed -i '/raspberrypi/d' /etc/hosts

echo Setting up locale
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
echo "LANG=en_US.UTF-" > /etc/locale.conf
locale-gen

echo Create $USER user
PASS_CRYPT=`perl -e "print crypt($AP_PASS,'sa');"`
useradd -m -p $PASS_CRYPT $USER
usermod -aG sudo $USER
echo Remove pi user
userdel -rf pi

echo Setup sudo permissions for $USER
echo "$USER ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/$USER

echo Populating /etc/dnsmasq.conf
bash -c 'cat > /etc/dnsmasq.conf' << EOF
interface=lo,ap0
no-dhcp-interface=lo,wlan0
bind-interfaces
server=1.1.1.1
domain-needed
bogus-priv
dhcp-range=${AP_IP_BEGIN}.50,${AP_IP_BEGIN}.150,12h
EOF


echo Populate /etc/hostapd/hostapd.conf
bash -c 'cat > /etc/hostapd/hostapd.conf' << EOF
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
country_code=NL
interface=ap0
driver=nl80211
ssid=${AP_SSID}
hw_mode=g
channel=7
wmm_enabled=0
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$AP_PASS
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP CCMP
rsn_pairwise=CCMP
EOF

echo Populate /etc/default/hostapd
bash -c 'cat > /etc/default/hostapd' << EOF
DAEMON_CONF="/etc/hostapd/hostapd.conf"
EOF

echo Populate /etc/network/interfaces
bash -c 'cat > /etc/network/interfaces' << EOF
source-directory /etc/network/interfaces.d
auto lo
auto ap0
auto wlan0
iface lo inet loopback
allow-hotplug ap0
iface ap0 inet static
   address ${AP_IP}
   netmask 255.255.255.0
   hostapd /etc/hostapd/hostapd.conf
allow-hotplug wlan0
iface wlan0 inet manual
   wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface AP1 inet dhcp
EOF

if command -v rfkill &> /dev/null ; then
  echo Make sure Wifi radio is not blocked
  rfkill unblock wlan
fi

echo Enable hostapd
systemctl unmask hostapd
systemctl enable hostapd

echo Create and enable custom boot script service /bin/start_wifi.sh
echo "echo 'Starting Wifi AP and client...'
sleep 30
ifdown --force wlan0
ifdown --force ap0
ifup ap0
ifup wlan0
$([ "${NO_INTERNET-}" != "true" ] && echo "sysctl -w net.ipv4.ip_forward=1")
$([ "${NO_INTERNET-}" != "true" ] && echo "iptables -t nat -A POSTROUTING -s ${AP_IP_BEGIN}.0/24 ! -d ${AP_IP_BEGIN}.0/24 -j MASQUERADE")
$([ "${NO_INTERNET-}" != "true" ] && echo "systemctl restart dnsmasq")" > /bin/rpi-wifi.sh
chmod +x /bin/rpi-wifi.sh
echo "[Unit]
Description=Simultaneous AP and Managed Mode Wifi on Raspberry Pi
Requires=network.target
After=network.target

[Service]
ExecStart=/bin/bash -c 'rpi-wifi.sh'
User=root

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/rpi-wifi.service
sudo systemctl enable rpi-wifi.service

# Samsung Electronics Co.,Ltd 
echo "Setting up permananent fake mac address"
echo "[Unit]
Description=macchanger on %I
Wants=network-pre.target
Before=network-pre.target
BindsTo=sys-subsystem-net-devices-%i.device
After=sys-subsystem-net-devices-%i.device

[Service]
ExecStart=/usr/bin/macchanger -m 50:85:69:63:13:82 %I
Type=oneshot

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/macchanger@.service 
systemctl enable macchanger@wlan0.service

echo "Setting web interface"
echo "[Unit]
Description=Web Interface for setting up wifi credentials
Wants=network-pre.target
Before=network-pre.target

[Service]
ExecStart=/usr/bin/node /var/www/html/index.js
Environment=PORT=80
Type=simple

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/web-interface.service
systemctl enable web-interface.service